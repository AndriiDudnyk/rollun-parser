<?php
/**
 * @copyright Copyright Â© 2014 Rollun LC (http://rollun.com/)
 * @license LICENSE.md New BSD License
 */

namespace rollun\parser;

use rollun\callback\Callback\Factory\CallbackAbstractFactoryAbstract;
use rollun\callback\Callback\Factory\TickerAbstractFactory;
use rollun\callback\Callback\Interrupter\Factory\InterruptAbstractFactoryAbstract;
use rollun\callback\Callback\Interrupter\Factory\ProcessAbstractFactory;
use rollun\callback\Callback\Interrupter\Process;
use rollun\callback\Callback\Ticker;
use rollun\datastore\DataStore\Factory\DataStoreAbstractFactory;
use rollun\parser\DataStore\AutoGenerateIdAspect;
use rollun\parser\DataStore\Entity\LoaderTask;
use rollun\parser\DataStore\Entity\LoaderTaskInterface;
use rollun\parser\DataStore\Entity\ParserTask;
use rollun\parser\DataStore\Entity\ParserTaskFactory;
use rollun\parser\DataStore\Entity\ParserTaskInterface;
use rollun\parser\DataStore\LoggedDbTable;
use rollun\parser\DataStore\Page\Factory\PagePluginManagerFactory;
use rollun\parser\DataStore\Page\PageDetector;
use rollun\parser\DataStore\Page\PageDetectorFactory;
use rollun\parser\DataStore\Page\PagePluginManager;
use rollun\parser\Loader\Heartbeat;
use rollun\parser\Loader\Loader\LoaderAbstractFactory;
use rollun\parser\Loader\Loader\LoaderInterface;
use rollun\service\Parser\FreeProxyList\DataStore\Entity\ProxyInterface as ProxyEntityStoreInterface;

class ConfigProvider
{
    public function __invoke()
    {
        return [
            'dependencies' => [
                'invokables' => [
                    UserAgentGenerator::class => UserAgentGenerator::class,
                    Heartbeat::class => Heartbeat::class,
                ],
                'factories' => [
                    ParserTask::class => ParserTaskFactory::class,
                    PageDetector::class => PageDetectorFactory::class,
                    PagePluginManager::class => PagePluginManagerFactory::class
                ],
                'abstract_factories' => [
                    LoaderAbstractFactory::class,
                ],
                'aliases' => [
                    'page-detector' => PageDetector::class,

                    ParserTaskInterface::class => ParserTask::class,
                    LoaderTaskInterface::class => __NAMESPACE__ . 'aspectLoaderTaskDataStore',
                    LoaderInterface::class => __NAMESPACE__ . 'baseLoader',
                ],
            ],
            LoaderAbstractFactory::class => [
                __NAMESPACE__ . 'baseLoader' => [
                    LoaderAbstractFactory::KEY_PROXY_DATASTORE => ProxyEntityStoreInterface::class,
                    LoaderAbstractFactory::KEY_OPTIONS => [
                        LoaderInterface::CREATE_TASK_IF_NO_PROXIES_OPTION => 1,
                        LoaderInterface::COOKIE_DOMAIN_OPTION => '.ebay.com',
                        LoaderInterface::USE_PROXY_OPTION => 1,
                        LoaderInterface::MAX_ATTEMPTS_OPTION => 30,
                        LoaderInterface::CONNECTION_TIMEOUT_OPTION => 10,
                        LoaderInterface::ALLOW_REDIRECT_OPTION => 1,
                    ],
                ],
            ],
            InterruptAbstractFactoryAbstract::KEY => [
                'loader-heartbeat' => [
                    InterruptAbstractFactoryAbstract::KEY_CLASS => Process::class,
                    ProcessAbstractFactory::KEY_CALLBACK_SERVICE => __NAMESPACE__ . 'loaderHeartbeatTicker'
                ],
            ],
            CallbackAbstractFactoryAbstract::KEY => [
                __NAMESPACE__ . 'loaderHeartbeatTicker' => [
                    TickerAbstractFactory::KEY_CLASS => Ticker::class,
                    TickerAbstractFactory::KEY_TICKS_COUNT => 60 * 60,
                    TickerAbstractFactory::KEY_TICK_DURATION => 3,
                    TickerAbstractFactory::KEY_CALLBACK => Heartbeat::class,
                ]
            ],
            ParserTaskFactory::class => [
                ParserTaskFactory::KEY_PARSER_TASK_DATASTORE => __NAMESPACE__ . 'parserTaskDataStoreAutoGeneratedId',
                ParserTaskFactory::KEY_STORE_DIR => getenv('DOCUMENT_DIR'),
            ],
            DataStoreAbstractFactory::KEY_DATASTORE => [
                __NAMESPACE__ . 'parserTaskDataStore' => [
                    'class' => LoggedDbTable::class,
                    'tableGateway' => 'parser_tasks',
                ],
                __NAMESPACE__ . 'loaderTaskDataStore' => [
                    'class' => LoggedDbTable::class,
                    'tableGateway' => 'loader_tasks',
                ],
                __NAMESPACE__ . 'parserTaskDataStoreAutoGeneratedId' => [
                    'class' => AutoGenerateIdAspect::class,
                    'dataStore' => __NAMESPACE__ . 'parserTaskDataStore',
                ],
                __NAMESPACE__ . 'loaderTaskDataStoreAutoGeneratedId' => [
                    'class' => AutoGenerateIdAspect::class,
                    'dataStore' => __NAMESPACE__ . 'loaderTaskDataStore',
                ],
                __NAMESPACE__ . 'aspectLoaderTaskDataStore' => [
                    'class' => LoaderTask::class,
                    'dataStore' => __NAMESPACE__ . 'loaderTaskDataStoreAutoGeneratedId',
                ],
            ],
            'tableGateway' => [
                'parser_tasks' => [],
                'loader_tasks' => [],
            ]
        ];
    }
}
